.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.7729,  6.4407,  8.0738,  3.5019,  4.5212],
            [ 5.8945,  5.5950,  5.1284,  7.2543,  8.7285],
            [ 7.2810,  7.8837,  6.9523,  6.3656,  4.1816],
            [ 6.8680,  6.2686,  8.0546,  7.0516, 12.2131],
            [ 2.7166,  4.6008, 14.4221,  3.8850,  5.4435],
            [ 6.8680,  5.7708,  6.9088,  5.3673, 12.2131],
            [ 7.2810,  2.6318,  4.1747,  2.0522,  4.1816],
            [ 5.8945,  6.7768,  7.8302,  3.1867,  8.7285]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.3280,  1.0803,  0.8095, -0.3011, -0.1676,  0.1725,  1.6193,  0.3068],
            [-1.3428,  0.0401, -1.3177,  1.2838, -0.0603,  0.9378, -0.4079,  1.1275],
            [ 0.7598, -0.5096, -0.4742, -0.7590, -0.8588,  0.9959,  1.7369,  0.1365],
            [-0.9325, -1.0849, -1.0849,  0.5698, -0.4603,  0.4101, -1.1614, -0.2760],
            [ 0.7577,  0.3345,  0.0173, -0.9256, -0.6178,  0.9488, -1.2622, -1.4780],
            [ 0.7111, -0.3831,  0.5937, -0.4470, -0.0768, -0.7581,  0.2121,  1.0213],
            [-1.7645,  0.1583,  0.3742, -0.5264, -1.5081, -0.2978,  1.1230, -0.5808],
            [ 0.4938, -1.0624,  0.1607, -0.7059,  0.0356,  0.4026, -0.2258, -0.9567]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4214, -0.4966, -1.1918],
            [-0.6896, -0.6592, -0.1106],
            [-0.3377, -0.1604,  0.6019]], requires_grad=True), Parameter containing:
    tensor([[0.7952]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5542,  0.8822, -0.3809, -0.4684,  2.5744,  3.5986,  2.8369,  3.0751],
            [ 0.4422,  2.8923, -0.5186,  4.7775,  1.2318,  4.9923,  1.8831, -1.6925],
            [ 4.0711,  0.4244,  2.4803,  3.1647,  3.1059,  2.7942,  2.5689, -1.2293],
            [ 3.7070,  0.4990,  1.7480,  0.9960,  2.8057, -0.3871,  3.9661,  0.0379],
            [ 1.2018,  2.0037, -0.5215,  2.9023,  3.5012, -0.1157,  2.2138,  1.7709],
            [-3.4256,  0.7378, -0.4902, -1.5759,  2.8729, -5.3502, -0.3036,  0.4442],
            [-1.4887, -0.3647, -0.9588, -2.0227, -2.1874, -1.8563,  0.0986,  2.6881],
            [-0.3517,  2.0101,  1.9521, -1.1421, -0.8077,  2.7533,  3.4268,  3.5691]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4196,  1.5960, -0.4077,  1.4665,  2.6811,  0.6687,  1.2793, -0.0010,
             -0.6354,  0.7794],
            [ 0.6605,  2.9074,  2.7281,  0.9732,  3.0386,  1.7827,  2.0189,  1.0694,
              1.4667, -0.0411],
            [ 1.0804,  3.8590,  2.3203,  1.0212,  0.5736,  0.6398, -2.3439, -0.9750,
             -0.9816, -1.2672],
            [-1.9536,  1.8857, -0.8312, -2.3831, -3.0376, -1.8906, -5.6829, -2.5912,
             -3.8583, -0.3261],
            [-1.5882,  0.2003, -1.2819,  0.5055, -2.3987, -1.4127, -1.9259, -2.4516,
              0.9212,  0.8990],
            [-0.6739, -1.2025, -0.0767, -1.5425,  1.4672,  1.0345,  0.8886, -0.0495,
              1.0225,  0.3250],
            [-0.7476, -1.8836, -2.1637, -2.1181,  1.8284, -1.0356, -0.7234, -0.0504,
             -1.2407, -0.3545],
            [ 0.2403, -0.9106, -1.1442, -1.9678,  1.1973,  2.1266, -1.6874,  2.2466,
             -1.1358,  1.1602],
            [ 0.0931, -0.0739, -0.0575, -0.7730,  0.0475,  2.2024, -0.2450, -0.1010,
              0.9884,  0.1742],
            [ 0.1283,  0.0809, -0.3369, -0.5034,  0.3635,  1.5508, -0.8271, -1.0538,
              1.0815, -0.6237]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.286 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
